●やること

●バフシェーダーの描画タイミング
・バフ付与時
・バフ発生時

●エフェクト
一回そのままの大きさで描画する


〇エフェクトの作成
①各パーツの生存時間の設定
②ウインドウから出力「録画」する
③出力フレーム（120）出力頻度（適切なもの）
④一枚絵、元の画像

https://ameblo.jp/546kw/entry-12617906090.html
〇エフェクシア　
①技発動時、エフェクトクラスからクリエイト
②コマンド情報の技エフェクトの情報を渡す（ハンドル、位置、大きさ）
③エフェクトの再生（Play関数を変数内に代入する）
④CheckPlay（再生終了か判断）
⑤終了ならば、次フェーズへ遷移

・エフェクト配列
ナンバー
ハンドル
大きさ

エフェクトの秒数

全員にエフェクト　or　全体にエフェクト


●あとで対処
・UI表示マネージャーを実装したい
使いまわすUI画像を所持
Player、Enemyを分けて、それぞれ描画

・エネミーの自動行動
配列の最初は「０」よりも「begin」がいいのでは？＿

・入力クラスにホイールの操作を作る

・サブ効果の実装
敵に攻撃した後、
セルフの場合、Selectedの中をセルフにしたい
それ以外の場合、同じ対象にバフをかけたい
・ドレイン			敵選択攻撃＆セルフ回復
・攻撃＆敵にバフ			敵選択攻撃＆敵選択バフ

●シェーダーについて
①ユニットは通常で描画する
②描画したユニットに画像を切り取って、新しい画像を作る
③その画像と、各シェーダーを掛け合わせて、スクリーンに描画する
・メリット
ユニットクラスにシェーダー情報を作る必要がない


・攻撃＆自分にバフ

〇シェーダー（ユニット）
バフを所有しているユニットに、それぞれシェーダーをかける
・メタル化→スペキュラ反射をかける
・毒→紫球を出す
・麻痺→黄色、びりびり
・オートヒール

〇調べる（聞く）
・DrawPolygonIndexed2DToShader と　DrawPrimitive2DToShaderの違い
・データベース

〇バトルコメントの作成（文章表示窓）：ポケモンみたいな
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーー➡コメントっ表示窓は一旦あきらめる
後回しにして、後で先生に聞いて出来そうだったら行う。
もう勢いとエフェクト、シェーダーで誤魔化す

・****のターン！
・****の++++！
・****は倒れた！

・****に???のダメージ
・****は???の回復した
・****は???状態になった


・毒が体を蝕む
・体が痺れて動かない……！
・****の体は透けている！

もしくは
〇ダメージ時に、ダメージ数値を表記する
ダメージ！
回復！
しびれている
毒を受けている


〇ユニットのロード
Select画面で、それぞれのxmlデータのパスを取得
→３体分のxmlデータをゲームシーンに渡す

〇キャラデータ
・名前
・画像
・HP
・攻撃力
・スピード
・コマンド技

〇ゲーム内容
タイトル：「ルーレットリガー（仮）」
ジャンル：ルーレット式コマンドバトル
プレイ人数：一人


〇一体あたりに使えるY座標範囲
27*20=540/3=180
〇フレームワーク
ＨＰ：40＊160
ＮＡＭＥ：＊30




