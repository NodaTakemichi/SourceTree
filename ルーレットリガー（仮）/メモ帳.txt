●やること
・画面デザイン決定　＆　画面演出
・管理クラス、データの管理

●各自ロードするもの
・ユニットのロード
Select画面で、それぞれのxmlデータのパスを取得
→３体分のxmlデータをゲームシーンに渡す

｛名前、画像、HP、攻撃力、スピード、コマンド技▼｝
・技の種類
｛技名、タイプ、対象、倍率、（バフタイプ）、エフェクト▼｝
・サウンド（エフェクトSE）


●
①ユニットデータマネージャーの作成
②全ユニットデータの取得
③クリエイトユニットで｛１，２，３，４，５，６｝のユニットを、データマネージャー
からFindで見つける。
④見つけたユニットのデータ情報を取得し、ユニットの作成


〇
・全ユニット情報（文字）を読み込む。
ユニットは番号管理されている
UnitDataManagerでも作って、それに管理させる。


　同じく、全コマンド情報（文字）
　同じく、全エフェクト情報（文字）


使用するユニット情報のみをデートとして読み込む


■セレクトシーン
必要な物：：｛エンカウント敵（No、画像）、デッキ情報（No）、背景｝

■デッキ編集シーン
必要な物：：｛所持ユニットの全情報、デッキ情報（No）｝
ロード
する　：名前、画像、ステータス、コマンド
しない：エフェクト、音声

■バトルシーン
・ユニット情報(No)	を取得
・コマンド情報(No)	を取得、登録
・エフェクト情報(No)	を取得、登録
・音声情報(No)		を取得、登録



■リザルトシーン
必要な物：：｛倒した敵（No、画像、名前）｝





〇画面演出
・体力回復
・バフ
・カーソル
・ターン交代
行動キャラの強調表示、名前枠を輝かせる、ターン文字の回転

・死亡演出
オレカバトル方式（グレースケール、マスク描画、枠を敵味方区別、画面揺らし




〇画面デザイン
UIは細い線で作る、線は光る
（ゼノブレイド、スト６、）

世界観：シンプル系
・ユニット枠
ユニットのUI全般（名前枠、フォント、HPゲージ）
・ルーレット
木版のようなもの、中央は回っていないデザイン
・フォント
説明用：
名前、回復用：
大文字用：
※情報量が少なくギル
・矢印
・一時停止
・背景
桜、雪景色、火の粉などを背景で落とす。（動き）
動かす。
＊画面に常に動いているもの、光っているもの、揺れているものを追加
「クリックして！」と画面に出す




・背景
桜、雪景色、火の粉などを背景で動かす。


〇バフシェーダーの描画タイミング
・バフ付与時(GiveBuff())
・バフ発生時


〇






●あとで対処
・UI表示マネージャーを実装したい
使いまわすUI画像を所持
Player、Enemyを分けて、それぞれ描画

・エネミーの自動行動
配列の最初は「０」よりも「begin」がいいのでは？＿

・入力クラスにホイールの操作を作る

・サブ効果の実装
敵に攻撃した後、
セルフの場合、Selectedの中をセルフにしたい
それ以外の場合、同じ対象にバフをかけたい
・ドレイン			敵選択攻撃＆セルフ回復
・攻撃＆敵にバフ			敵選択攻撃＆敵選択バフ

●シェーダーについて
①ユニットは通常で描画する
②描画したユニットに画像を切り取って、新しい画像を作る
③その画像と、各シェーダーを掛け合わせて、スクリーンに描画する
・メリット
ユニットクラスにシェーダー情報を作る必要がない

〇シェーダー（ユニット）
バフを所有しているユニットに、それぞれシェーダーをかける
・メタル化→スペキュラ反射をかける
・毒→紫球を出す
・麻痺→黄色、びりびり
・オートヒール

〇ゲーム内容
タイトル：「ルーレットリガー（仮）」
ジャンル：ルーレット式コマンドバトル
プレイ人数：一人


〇一体あたりに使えるY座標範囲
27*20=540/3=180
〇フレームワーク
ＨＰ：40＊160
ＮＡＭＥ：＊30




